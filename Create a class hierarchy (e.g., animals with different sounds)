#include <iostream>
#include <memory>
#include <string>
#include <stdexcept>

class Animal {
public:
    virtual void makeSound() const = 0;
};

class Dog : public Animal {
public:
    void makeSound() const override {
        std::cout << "Woof!" << std::endl;
    }

};

class Cat : public Animal {
public:
    void makeSound() const override {
        std::cout << "Meow!" << std::endl;
    }
   
};

class Cow : public Animal {
public:
    void makeSound() const override {
        std::cout << "Moo!" << std::endl;
    }

};

std::shared_ptr<Animal> createAnimal(const std::string& type) {
    if (type == "Dog") {
        return std::make_shared<Dog>();
    } else if (type == "Cat") {
        return std::make_shared<Cat>();
    } else if (type == "Cow") {
        return std::make_shared<Cow>();
    } else {
        throw std::invalid_argument("no animal");
    }
}

int main() {
    try {
        std::shared_ptr<Animal> myDog = createAnimal("Dog");
        std::shared_ptr<Animal> myCat = createAnimal("Cat");
        std::shared_ptr<Animal> myCow = createAnimal("Cow");

        myDog->makeSound();
        myCat->makeSound();
        myCow->makeSound();

        std::shared_ptr<Animal> unknownAnimal = createAnimal("Dinosaur");
    } catch (const std::invalid_argument& e) {
        std::cerr << "error : " << e.what() << std::endl;
    }

    return 0;
}
