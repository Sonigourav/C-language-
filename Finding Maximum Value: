#include <iostream>
#include <vector>
#include <functional>
#include <numeric>

template <typename T>
T find_max(const std::vector<T>& objects, std::function<bool(const T& a, const T& b)> compare) {
    return std::accumulate(objects.begin(), objects.end(), objects.front(), 
                           [&compare](const T& max, const T& obj) {
                               return compare(max, obj) ? obj : max;
                           });
}

int main() {
    // Example with integers
    std::vector<int> numbers = {1, 3, 5, 7, 2, 4, 6, 8};
    
    // Lambda for comparing integers
    auto compare_int = [](const int& a, const int& b) {
        return a < b;
    };
    
    int max_number = find_max(numbers, std::function<bool(const int&, const int&)>(compare_int));
    std::cout << "Maximum number: " << max_number << std::endl;
    
    // Example with a custom object
    struct Person {
        std::string name;
        int age;
    };
    
    std::vector<Person> people = {{"Alice", 30}, {"Bob", 25}, {"Charlie", 35}};
    
    // Lambda for comparing ages of people
    auto compare_age = [](const Person& a, const Person& b) {
        return a.age < b.age;
    };
    
    Person oldest_person = find_max(people, std::function<bool(const Person&, const Person&)>(compare_age));
    std::cout << "Oldest person: " << oldest_person.name << ", Age: " << oldest_person.age << std::endl;
    
    return 0;
}
