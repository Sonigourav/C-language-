#include <iostream>
#include <stdexcept>
using namespace std;
template <typename T>
class Stack {
public:
    Stack();               

    void push(const T& value);
    void pop();               
    const T& peek() const;   
    bool isEmpty() const;    
    size_t size() const;       

private:
    void resize(size_t newCapacity); 

    T* data;             
    size_t s;         
    size_t cap;     
};


template <typename T>
Stack<T>::Stack() : s(0), cap(1) {
    data = new T[cap];
}

template <typename T>
void Stack<T>::push(const T& value) {
    if (s >= cap) {
        resize(2 * cap);
    }
    data[s++] = value;
}

template <typename T>
void Stack<T>::pop() {
    if (isEmpty()) {
        cout<<"Stack Empty";
    }
    --s;
}


template <typename T>
const T& Stack<T>::peek() const {
    if (isEmpty()) {
        cout<<"Stack is empty";
    }
    return data[s - 1];
}


template <typename T>
bool Stack<T>::isEmpty() const {
    return s == 0;
}

template <typename T>
size_t Stack<T>::size() const {
    return s;
}

template <typename T>
void Stack<T>::resize(size_t newcap) {
    T* newData = new T[newcap];
    for (size_t i = 0; i < s; ++i) {
        newData[i] = data[i];
    }
    delete[] data;
    data = newData;
    cap = newcap;
}

template class Stack<int>;
template class Stack<float>;
template class Stack<std::string>;


int main() {
    
    Stack<int> intStack;
    intStack.push(10);
    intStack.push(20);
    std::cout << "Top element (int): " << intStack.peek() << std::endl;
    intStack.pop();
    std::cout << "Top element after pop (int): " << intStack.peek() << std::endl;

    Stack<float> floatStack;
    floatStack.push(1.1);
    floatStack.push(2.2);
    std::cout << "Top element (float): " << floatStack.peek() << std::endl;
    floatStack.pop();
    std::cout << "Top element after pop (float): " << floatStack.peek() << std::endl;

    Stack<std::string> stringStack;
    stringStack.push("Hello");
    stringStack.push("World");
    std::cout << "Top element : " << stringStack.peek() << std::endl;
    stringStack.pop();
    std::cout << "Top element after pop : " << stringStack.peek() << std::endl;

    return 0;
}
