#include<iostream>
#include<typeinfo>
using namespace std;

class Base{
    public:
        virtual void whoamI(){
            std::cout << "I am Base class object\n" << std::endl;
        }
};

class Derived : public Base{
    public : 
        void whoamI() override {
            std::cout << "I am Derived class object" << std::endl;
        }
};

int main(){
    double num = 3.124434;
    int integer_part = static_cast<int>(num);
    std::cout << "Original number : " << num<< std::endl;
    std::cout << "Integer part : " << integer_part << std::endl;
    
    Base *base_ptr;
    Derived *derived_ptr = static_cast<Derived*>(base_ptr);
    
    
    if(dynamic_cast<Derived*>(base_ptr) != nullptr){
        derived_ptr = static_cast<Derived*>(base_ptr);
        derived_ptr->whoamI();
    }else{
        std::cout << "Cast Failed :  Base class object is not actually Derived" << std::endl;
    }
    
    Base* actual_derived_ptr = new Derived;
    
    derived_ptr = dynamic_cast<Derived*>(actual_derived_ptr);
    if(derived_ptr != nullptr){
        derived_ptr -> whoamI();
    }else{
        std::cout << "Cast Failed :  Base class object is not actually Derived" << std::endl;
    }
    
    delete actual_derived_ptr;
    
    int value = 10;
    float* float_ptr = reinterpret_cast<float*>(&value);
    
    return 0;
}
