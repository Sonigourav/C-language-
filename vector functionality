#include<iostream>
#include<vector>
#include<algorithm>

int main(){
    std::vector<int>vec1;
    
    std::vector<int>vec2(10,5);
    
    std::vector<int> vec3{1,2,3,4,5};
    
    std::vector<int> vec4(vec3.begin(),vec3.end());
    
    std::vector<int> vec5(vec3) ;
    
    std::vector<int>vec6(std::move(vec5)) ;
    
    vec1 = vec2;
    
    vec1 = std::move(vec2);
    vec1 = {45,98,10,20,30};
    
        std::cout << "element at index 1: "<< vec1[1] << std::endl;
        std::cout << "element at index 2 : "<< vec1.at(2) << std::endl;
        std::cout << "Frist element : "<<vec1.front() << std::endl;
        std::cout << "Last element : "<<vec1.back() << std::endl;
      int *data = vec1.data();
      std::cout << "Element via data pointer : "<< data[0] << std::endl;
     std::cout << "Element in vec1 : ";
    for(auto it = vec1.begin();it!=vec1.end();++it){
        std::cout << *it <<" ";
    }
    std::cout<< std::endl;
    std::cout << "Element in reverse : ";
    for(auto it = vec1.rbegin();it!=vec1.rend();++it){
        std::cout << *it <<" ";
    }
    std::cout<< std::endl;
    
    std::cout << "Size : " << vec1.size() << std::endl;
    std::cout << "Capacity : "<< vec1.capacity() << std::endl;
    std::cout << "Empty : " << vec1.empty() << std::endl;
    vec1.resize(5);
    std::cout << "Resized vec1 : "<< std::endl;
        std::cout << "Size : " << vec1.size() << std::endl;

    vec1.reserve(20);
      std::cout << "Reserved capacity: " << vec1.capacity() << std::endl;
    
      6. Modifiers
    vec1.assign(7, 100);                                             // assign()
    vec1.push_back(200);                                             // push_back()
    vec1.pop_back();                                                 // pop_back()
    vec1.insert(vec1.begin() + 1, 300);                              // insert()
    vec1.erase(vec1.begin() + 2);                                    // erase()
    vec1.emplace(vec1.begin(), 400);                                 // emplace()
    vec1.emplace_back(500);                                          // emplace_back()
    vec1.swap(vec3);                                                 // swap()
    vec1.clear(); 
    
    std::cout << "Is vec1 == vec3? " << (vec1 == vec3) << std::endl; // operator==
    std::swap(vec1, vec3);                                           // swap()
    std::cout << "Elements after swap: ";
    for (const auto& elem : vec1) {
        std::cout << elem << " ";
    }
    std::cout << std::endl;
      std::sort(vec1.begin(), vec1.end());                             // sort()
    std::cout << "Sorted elements: ";
    for (const auto& elem : vec1) {
        std::cout << elem << " ";
    }
    std::cout << std::endl;
    



    
    return 0;
}
